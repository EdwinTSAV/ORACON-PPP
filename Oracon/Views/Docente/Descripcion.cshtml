
@{
    ViewData["Title"] = "Descripcion";
    Layout = "~/Views/Shared/Docente_Layout.cshtml";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Agregar descripción de Curso</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/docente/">Dashboard</a></li>
        <li class="breadcrumb-item active">Crear Detalle</li>
    </ol>
    <form action="/docente/Descripcion" enctype="multipart/form-data" class="col-12" method="post">
        <div class="mb-3">
            <label class="form-label" for="IdCurso">Selecciona un curso</label>
            <select name="IdCurso" class="form-control" required>
                <option value="">-- Selecciona un curso --</option>
                @foreach (var item in ViewBag.Cursos)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label class="form-label" for="Descripcion">Agregar descripción al curso</label>
        </div>
        <textarea id="text" rows="5" cols="60" name="Descripcion"></textarea>

        <div class="mb-3">
            <label class="form-label" for="Video">Agregar video introductorio</label>
            <input type="text" class="form-control" placeholder="Video" name="Video" required />
            <p class="alert-danger">@Html.ValidationMessage("Video")</p>
        </div>

        <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Guardar</button>
        <a class="btn btn-danger" href="/docente/">Cancelar</a>
    </form>
</div>

<script>
    var simplemde = new SimpleMDE({
	autofocus: true,
	autosave: {
		enabled: true,
		uniqueId: "MyUniqueID",
		delay: 1000,
	},
	blockStyles: {
		bold: "__",
		italic: "_"
	},
        element: document.getElementById("text"),
	forceSync: true,
	hideIcons: ["guide", "heading"],
	indentWithTabs: false,
	initialValue: "Hello world!",
	insertTexts: {
		horizontalRule: ["", "\n\n-----\n\n"],
		image: ["![](http://", ")"],
		link: ["[", "](http://)"],
		table: ["", "\n\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n\n"],
	},
	lineWrapping: false,
	parsingConfig: {
		allowAtxHeaderWithoutSpace: true,
		strikethrough: false,
		underscoresBreakWords: true,
	},
	placeholder: "Type here...",
	previewRender: function(plainText) {
		return customMarkdownParser(plainText); // Returns HTML from a custom parser
	},
	previewRender: function(plainText, preview) { // Async method
		setTimeout(function(){
			preview.innerHTML = customMarkdownParser(plainText);
		}, 250);

		return "Loading...";
	},
	promptURLs: true,
	renderingConfig: {
		singleLineBreaks: false,
		codeSyntaxHighlighting: true,
	},
	shortcuts: {
		drawTable: "Cmd-Alt-T"
	},
	showIcons: ["code", "table"],
	spellChecker: false,
	status: false,
	status: ["autosave", "lines", "words", "cursor"], // Optional usage
	status: ["autosave", "lines", "words", "cursor", {
		className: "keystrokes",
		defaultValue: function(el) {
			this.keystrokes = 0;
			el.innerHTML = "0 Keystrokes";
		},
		onUpdate: function(el) {
			el.innerHTML = ++this.keystrokes + " Keystrokes";
		}
	}], // Another optional usage, with a custom status bar item that counts keystrokes
	styleSelectedText: false,
	tabSize: 4,
	toolbar: false,
	toolbarTips: false,
});
</script>